> In Angular 8 the syntax for using @ViewChild() decorator requires a second argument and needs to be applied to all usages of @ViewChild().
   @ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;

> If we plan on accessing the selected element inside of ngOnInit() we must set the static option value to true.
> If we do not access the selected element in ngOnInit but anywhere else in our component, we would set the static option value to false instead.
> This is a temporary adjustment which will not be required once Angular 9 is released in November 2019.

> There is another way of getting access to local reference (or to any element) directly from our TypScript code. 
> In the local reference technique we pass the local reference when we call on a method which works fine, but sometimes we want to get access before we call a method. We can use a decorator in our TypeScript code to get access to the element.
> We need to ensure we import @ViewChild from @angular/core.

   cockpit.component.html:
      <input type="text" class="form-control" #serverContentInput>
   
   cockpit.component.ts:
      import { Component, OnInit, EventEmitter, Output, ViewChild, ElementRef } from '@angular/core';
      export class CockpitComponent implements OnInit {
         @ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;

         onAddServer() {
            console.log(this.serverContentInput);
         }
      }

> We need to pass in two argument to the @ViewChild() decorator and these arguments are actually the selector for the element i.e. how we want to select that element:
   - The first argument is a string name of the local reference. 
   If we want to select a component we would type the name of the component without the quotation marks e.g. CockpitComponent. This will provide us the access to the first occurrence of the component.
   - The second argument is an static option we need to set to true or false depending if we also use the selected element in ngOnInit() life cycle method.

> In the console we would see that a ElementRef object is returned back for the serverContentInput property.
> We can use TypeScript to define the serverContentInput property type i.e. type of ElementRef. 
> ElementRef must also be imported from @angular/core because this is a Angular type.

         onAddServer() {
            console.log(this.serverContentInput.nativeElement.value)
         }

> We can use .nativeElement to get access to the underlying element i.e. the input element. We could now get access the value which is a property accessible for input elements.

> We can now without two-way binding, can use local reference to pass element data through methods or local references fetched through @ViewChild() decorator.
> It is strongly recommended not to change the element through the @ViewChild property. It is possible to do so for example:
   this.serverContentInput.nativeElement.value = 'Something';

> We can do this, but it is strongly recommended not to access the DOM like the above example because Angular provides us with a better way of accessing the DOM which we will learn later in Directives Deep Dive section.
> We should generally use other tools such as string interpolation and property binding if we want to output something in the DOM.