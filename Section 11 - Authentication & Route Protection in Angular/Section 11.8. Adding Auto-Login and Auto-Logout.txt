Important Note: The code reference is applied to "The Project/AppProject" recipes application.

Adding Auto-Login:
> Once we are authenticated we need to keep that token persisted even if we reload the page. 
> At the moment when we reload the page we loose the authentication status because the Angular application restarts and loses the state. We are only storing the application state in memory and therefore we lose this memory when the application restarts.
> If we want to store the token we need to store it somewhere else and not in a JavaScript variable or class property.
> We have to store it in a persistent storage that survives page reloads and browser restarts which we can write to and read data from.
> In a Browser we have different storages and we cannot access the normal file system on our device but we can work with cookies or localStorage which is an API exposed by the browser to store simple key:value pairs on the file system but controlled by the browser.
> So in our handleAuthentication method in our authService which is where we create our user object and emit it to our application. Besides emitting it to our application we also want to store it in our localStorage.
> We can call localStorage.setItem() to store a key:value pair in localStorage.
> The first argument is a string which is a name we can name whatever we would like. This will be a key by which we will be able to retrieve the data. The second argument takes in a string and this is where we write some data to the first argument key.
> To convert a JavaScript object into a string we can use the JSON.stringify() method.
> If we now login to the application and go into the browsers devtools and into the application tab, we can go to the Local Storage section and expand it and we should see in our storage the key:value pair we setup to store in our localStorage. This is all string data.
> We can now also retrieve it from localStorage whenever our application restarts. We can add a new method in our authService called autoLogin which will look in our localStorage to see if there is a user data saved.
> We can use localStorage.getItem() and passing in the key to retrieve the data value stored in the key specified. To work the the string as a JavaScript object we have to convert it back using JSON.parse() on our retrieved data.
> Once we get the user data we can create a new User subject passing in the data and check if the user has a token and if so we can use the .next() to emit the loaded user as the currently active user.
> This will provide us with an auto-login whenever we reload the application.
> We can now add this to a component which runs early in our application lifecycle and that would typically be the app.component.ts file because it runs as soon as the application starts.


Adding Auto-Logout:
> Our tokens have an expiry of 1 hour, so it would be nice to auto-logout a user when the token expires.
> We would now have a bug in our application whereby the token would expire but this would not be reflected in the application because the application would forever login the user because we have a snapshot stored in localStorage and we never clear that snapshot.
> We can clear it when we logout, but it will not not clear automatically when the token expires.
> In the authService since we store a snapshot when logging in we should also clear that snapshot when we logout.
> We can use localStorage.clear() to clear all the data in localStorage which would make sense if we have no other data in there. The better method is to use localStorage.removeItem() passing in the key as the argument to remove the key and its data from localStorage. This will clear the data when we logout.
> We now need to set a timer when we first get a token so that we know when to invalidate that token at a later point in time.
> We can create a autoLogout method which will set a timer and manages the timer for automatically logging the user out. This will take in a expiration duration argument which is of the type number. 
> The autoLogout will have a setTimeout function which will call the logout method after a period of time i.e. the token expiration duration time.
> When we do logout we want to clear that timer. This is because if the user manually logs out of the application we need to be able to clear that timer else the timer will continue in the background and calls the logout method again at a later point in time and we do not want to do that.
> We store the timer in a property which is of the type any. In the logout function we just have to clear that timer property by checking if we have an active timer and if true then use the clearTimeout and passing in our timer property as the argument.
> We would now need to call the autoLogout method whenever we emit a new user to our application i.e. whenever we use our user subject. This would be in our handleAuthentication and autoLogin methods.
> The user subject expiresIn property will contains the seconds for when the token expires. If we multiply by 1000 we can convert it to milliseconds which we can pass to our autoLogout method to use as the setTimeout value because we expect milliseconds in our autoLogout method.
> In the autoLogin method, we would need to calculate the remaining time for the autoLogout. We can use the getTime method to convert the time into milliseconds. We simply take the future tokenExpirationDate in milliseconds and minus it from the current new Date in milliseconds to give the remainder duration time in milliseconds before we should call the autoLogout. We can pass this number to our autoLogout method.