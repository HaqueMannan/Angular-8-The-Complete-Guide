Deploying Universal Apps:
> As mentioned in the previously, we cannot deploy an Angular Universal app to a static host (i.e. Firebase Hosting, AWS S3, etc). This will not work.
> The reason for this is, that we are using Node.js to pre-render pages on the server and those Hosts do not support Node.js.
> Hence, we need a host that does support Node.js for example AWS ElasticBeanstalk or Heroku.
> To these hosts, we need to upload our dist/ folder along with the package.json file to our host server. On the web server, we then have to ensure that npm install is executed followed by npm serve:ssr.
> That's it - our Angular Universal application is now up and running on a web server!

> If you want to host your Universal app on Firebase, you could use Firebase's Cloud Functions. This is certainly not the easiest way to host our Universal apps, but it is possible. Below are the following instructions of achieving this:

SOME PREPARATIONS ...
> Test the live served app on localhost:4200 (e.g. functionality such as login, database access etc.) then stop the server with Ctrl + C keyboard keys.
> Test the SSR functionality by running npm run build:ssr and npm run serve:ssr (localhost:4000) then stop the server with Ctrl + C keyboard keys.

Install Firebase Tools and initialize the project ...
> If we have not installed the Firebase Command Line Tools before, run npm install -g firebase-tools
> Run firebase login, providing our Firebase credentials (email/password) if requested.
> Run firebase init

Answer some questions ...
> Are you ready to proceed? Type y and hit ENTER.
> "Which firebase CLI features do you want to setup?" Choose ...
   (*) Functions
   (*) Hosting
   ... , selecting both with the SPACE key, and hitting ENTER.
> "Select a default Firebase project for this directory?" Select one with the ARROW keys and hit ENTER.
> "What language would you like to use to write Cloud Functions?" Select TypeScript with the ARROW keys and hit ENTER.
> "Do you want to use TSLint?" Type y and hit ENTER.
> "Do you want to install dependencies with npm now?" Type y and hit ENTER.
> "What do you want to use as your public directory?" Type dist/browser and hit ENTER (Please note: this is different from deploying an app without Universal!).
> "Configure as a single page app?" Type y and hit ENTER.
> File index.html already exists. Overwrite? Type n (important!) and hit ENTER.
> Fold/Unfold the project in your IDE so that all new files are visible.


MODIFY SOME FILES ...
> In the firebase.json replace "destination": "/index.html" by "function": "ssr"
> In the server.ts add export to the app initialization: export const app = express();
> In the server.ts comment out the last three lines (app.listen(...)).
> In webpack.server.config.js add two new entries to output:

   webpack.server.config.js:
      output: {
         path: path.join(__dirname, 'dist'),
         library: 'app',
         libraryTarget: 'umd',
         filename: '[name].js',
      },

> Rebuild the app running npm run build:ssr.
> In the terminal move to the functions folder: cd functions
> Install an npm package for filesystem access: npm i fs-extra
> Inside the functions folder create a new file named copy-angular-app.js, with this content:

   copy-angular-app.js:
      const fs = require('fs-extra');
      fs.copy('../dist', './dist');

> In the functions/package.json (not in the project's package.json!) change the build entry:

   functions/package.json
      "build": "node copy-angular-app && tsc",

> In the functions/src/index.ts replace the default comment by these lines (keeping the import in line 1):

   functions/src/index.ts
      const universal = require(`${process.cwd()}/dist/server`).app;
      export const ssr = functions.https.onRequest(universal);

> In the terminal make sure that we are in the functions directory, and in there run the command npm run build to copy the dist folder into the functions folder.


DEPLOY THE APPLICATION ...
> We can serve the application locally before deployment, on localhost:5000, by running firebase serve (if we want to) and then stop the server using Ctrl + C on the keyboard.
> We can deploy the application by running firebase deploy and visit it via the url which is displayed in the terminal.